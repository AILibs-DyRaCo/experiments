/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3.1/userguide/tutorial_java_projects.html
 */
// Apply the java plugin to add support for Java


apply plugin: 'java'
apply plugin: 'eclipse'
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
        	srcDir 'src/main/resources'
    	}
    }
}


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url "https://nexus.cs.upb.de/repository/maven-releases/" }
	maven { url "https://nexus.cs.upb.de/repository/maven-snapshots/" }
	maven { url "https://nexus.cs.upb.de/repository/sfb901-releases/" }
	maven { url 'https://jitpack.io' }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // this is the local AILibs
    compile ('de.upb.isys:AILibs-dyraco:')

    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.25'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

// copy this if you want to have a jar that has all dependenices and your main-class
// use gradle datasetGenJar to make the jar & the jar will be in build/libs/datasetGen.jar
task datasetGenJar(type: Jar) {
	zip64 = true
    manifest {
        attributes 'Main-Class': ' dyadranking.performance.DyadDatasetGenerator'
    }
    destinationDir = file("${projectDir}")
    baseName = 'datasetGen'
    exclude ('META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA')
    from sourceSets.main.allSource
    from { (configurations.compile)
            .collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

